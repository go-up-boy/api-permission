// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleRulesRelationFieldNames          = builder.RawFieldNames(&RoleRulesRelation{})
	roleRulesRelationRows                = strings.Join(roleRulesRelationFieldNames, ",")
	roleRulesRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(roleRulesRelationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	roleRulesRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(roleRulesRelationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	roleRulesRelationModel interface {
		Insert(ctx context.Context, data *RoleRulesRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleRulesRelation, error)
		FindOneByRoleIdRuleId(ctx context.Context, roleId int64, ruleId int64) (*RoleRulesRelation, error)
		Update(ctx context.Context, data *RoleRulesRelation) error
		Delete(ctx context.Context, id int64) error
		FindAllByRoleIds(ctx context.Context, roleIds []int64) ([]int64, error)
	}

	defaultRoleRulesRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoleRulesRelation struct {
		Id       int64        `db:"id"`
		RoleId   int64        `db:"role_id"`
		RuleId   int64        `db:"rule_id"`
		CreateAt time.Time    `db:"create_at"`
		UpdateAt sql.NullTime `db:"update_at"`
	}

)

func newRoleRulesRelationModel(conn sqlx.SqlConn) *defaultRoleRulesRelationModel {
	return &defaultRoleRulesRelationModel{
		conn:  conn,
		table: "`role_rules_relation`",
	}
}

func (m *defaultRoleRulesRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleRulesRelationModel) FindOne(ctx context.Context, id int64) (*RoleRulesRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRulesRelationRows, m.table)
	var resp RoleRulesRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleRulesRelationModel) FindOneByRoleIdRuleId(ctx context.Context, roleId int64, ruleId int64) (*RoleRulesRelation, error) {
	var resp RoleRulesRelation
	query := fmt.Sprintf("select %s from %s where `role_id` = ? and `rule_id` = ? limit 1", roleRulesRelationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleId, ruleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleRulesRelationModel) FindAllByRoleIds(ctx context.Context, ids []int64) ([]int64, error) {
	var resp []int64
	var strIds string
	if len(ids) == 0 {
		return nil, ErrNotFound
	}
	for _, id := range ids{
		strIds = strIds + strconv.FormatInt(id, 10)
	}
	query := fmt.Sprintf("select %s from %s where `role_id` in (%s)", "rule_id", m.table, strIds)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultRoleRulesRelationModel) Insert(ctx context.Context, data *RoleRulesRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, roleRulesRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.RuleId)
	return ret, err
}

func (m *defaultRoleRulesRelationModel) Update(ctx context.Context, newData *RoleRulesRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRulesRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RoleId, newData.RuleId, newData.Id)
	return err
}

func (m *defaultRoleRulesRelationModel) tableName() string {
	return m.table
}
