// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"api-permission/internal/types"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolesFieldNames          = builder.RawFieldNames(&Roles{})
	rolesRows                = strings.Join(rolesFieldNames, ",")
	rolesRowsExpectAutoSet   = strings.Join(stringx.Remove(rolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), ",")
	rolesRowsWithPlaceHolder = strings.Join(stringx.Remove(rolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), "=?,") + "=?"
)

type (
	rolesModel interface {
		Insert(ctx context.Context, data *Roles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Roles, error)
		Update(ctx context.Context, data *Roles) error
		Delete(ctx context.Context, id int64) error
		PaginationList(ctx context.Context, p *types.ListPageItem) ([]Roles, error)
		FindAll(ctx context.Context, ids []int64) ([]Roles, error)
	}

	defaultRolesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Roles struct {
		Id        int64        `db:"id"`
		Name      string       `db:"name"`
		Slug      string       `db:"slug"`
		Pid       int64        `db:"pid"`
		MaxRole   int        	`db:"max_role"`
		UpdateAt sql.NullTime 	`db:"update_at"`
		CreateAt time.Time 		`db:"create_at"`
		DeleteAt sql.NullTime 	`db:"delete_at"`
	}
)

func newRolesModel(conn sqlx.SqlConn) *defaultRolesModel {
	return &defaultRolesModel{
		conn:  conn,
		table: "`roles`",
	}
}

func (m *defaultRolesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRolesModel) FindOne(ctx context.Context, id int64) (*Roles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rolesRows, m.table)
	var resp Roles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultRolesModel) FindAll(ctx context.Context, ids []int64) ([]Roles, error) {
	var strIds string
	if len(ids) == 0 {
		return nil, ErrNotFound
	}
	for _, id := range ids{
		strIds = strIds + strconv.FormatInt(id, 10) + ","
	}
	query := fmt.Sprintf("select %s from %s where `id` in (%s)", rolesRows, m.table, strings.Trim(strIds, ","))
	var resp []Roles
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolesModel)PaginationList(ctx context.Context, p *types.ListPageItem) (role []Roles, err error) {
	var roles []Roles
	query := fmt.Sprintf("select %s from %s limit ?,?", "*", m.table)
	queryCount := fmt.Sprintf("select count(*) from %s",  m.table)
	m.conn.QueryRowCtx(ctx, &p.TotalRows, queryCount)
	err = m.conn.QueryRowsCtx(ctx, &roles, query, (p.Page-1)*p.Limit, p.Limit)
	p.TotalPage = int64(math.Ceil(float64(p.TotalRows) / float64(p.Limit)))
	switch err {
	case nil:
		return roles, nil
	case sqlc.ErrNotFound:
		return roles, nil
	default:
		return nil, err
	}
}

func (m *defaultRolesModel) Insert(ctx context.Context, data *Roles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, rolesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Slug, data.Pid, data.MaxRole)
	return ret, err
}

func (m *defaultRolesModel) Update(ctx context.Context, data *Roles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rolesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Slug, data.Pid, data.MaxRole, data.Id)
	return err
}

func (m *defaultRolesModel) tableName() string {
	return m.table
}
