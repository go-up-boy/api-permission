// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"api-permission/internal/types"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rulesFieldNames          = builder.RawFieldNames(&Rules{})
	rulesRows                = strings.Join(rulesFieldNames, ",")
	rulesRowsExpectAutoSet   = strings.Join(stringx.Remove(rulesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), ",")
	rulesRowsWithPlaceHolder = strings.Join(stringx.Remove(rulesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), "=?,") + "=?"
)

type (
	rulesModel interface {
		Insert(ctx context.Context, data *Rules) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Rules, error)
		Update(ctx context.Context, data *Rules) error
		Delete(ctx context.Context, id int64) error
		PaginationList(ctx context.Context, p *types.ListPageItem) ([]Rules, error)
		FindAllByRules(ctx context.Context, ids []int64, uri... string) ([]Rules, error)
	}

	defaultRulesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Rules struct {
		Id        int64        `db:"id"`
		Uri       string       `db:"uri"`
		Name      string       `db:"name"`
		Slug      string       `db:"slug"`
		UpdateAt sql.NullTime `db:"update_at"`
		CreateAt time.Time `db:"create_at"`
		DeleteAt sql.NullTime `db:"delete_at"`
	}
)

func newRulesModel(conn sqlx.SqlConn) *defaultRulesModel {
	return &defaultRulesModel{
		conn:  conn,
		table: "`rules`",
	}
}

func (m *defaultRulesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRulesModel) FindOne(ctx context.Context, id int64) (*Rules, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rulesRows, m.table)
	var resp Rules
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultRulesModel) FindAllByRules(ctx context.Context, ids []int64, uri... string) ([]Rules, error) {
	var resp []Rules
	var uriCondition string
	var collection string
	for _, id := range ids{
		collection = collection + strconv.FormatInt(id, 10) + ","
	}
	if len(uri) > 0 {
		uriCondition = " and uri = ?"
	}
	query := fmt.Sprintf("select %s from %s where `id` in (%s)%s", rulesRows, m.table, strings.Trim(collection,  ","), uriCondition)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uri[0])
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRulesModel) Insert(ctx context.Context, data *Rules) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, rulesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uri, data.Name, data.Slug)
	return ret, err
}

func (m *defaultRulesModel) Update(ctx context.Context, data *Rules) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rulesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uri, data.Name, data.Slug, data.Id)
	return err
}

func (m *defaultRulesModel) PaginationList(ctx context.Context, p *types.ListPageItem) (rules []Rules, err error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", "*", m.table)
	queryCount := fmt.Sprintf("select count(*) from %s",  m.table)
	m.conn.QueryRowCtx(ctx, &p.TotalRows, queryCount)
	err = m.conn.QueryRowsCtx(ctx, &rules, query, (p.Page - 1) * p.Limit, p.Limit)
	p.TotalPage = int64(math.Ceil(float64(p.TotalRows) / float64(p.Limit)))
	switch err {
	case nil:
		return rules, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRulesModel) tableName() string {
	return m.table
}
