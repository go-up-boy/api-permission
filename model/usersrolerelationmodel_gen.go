// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"api-permission/internal/utils"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersRoleRelationFieldNames          = builder.RawFieldNames(&UsersRoleRelation{})
	usersRoleRelationRows                = strings.Join(usersRoleRelationFieldNames, ",")
	usersRoleRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(usersRoleRelationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), ",")
	usersRoleRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(usersRoleRelationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`delete_at`"), "=?,") + "=?"
)

type (
	usersRoleRelationModel interface {
		Insert(ctx context.Context, data *UsersRoleRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsersRoleRelation, error)
		Update(ctx context.Context, data *UsersRoleRelation) error
		Delete(ctx context.Context, id int64) error
		FindAllByUserId(ctx context.Context, userId int64) ([]int64, error)
		UpdateUserRoles(ctx context.Context, userId int64, roles []int64) error
		DeleteByUser(ctx context.Context, userId int64, RoleId int64) error
	}

	defaultUsersRoleRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UsersRoleRelation struct {
		Id        int64        `db:"id"`
		RoleId    int64        `db:"role_id"`
		UserId    int64        `db:"user_id"`
		UpdateAt sql.NullTime  `db:"update_at"`
		CreateAt time.Time	   `db:"create_at"`
		DeleteAt sql.NullTime  `db:"delete_at"`
	}
)

func newUsersRoleRelationModel(conn sqlx.SqlConn) *defaultUsersRoleRelationModel {
	return &defaultUsersRoleRelationModel{
		conn:  conn,
		table: "`users_role_relation`",
	}
}

func (m *defaultUsersRoleRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUsersRoleRelationModel) DeleteByUser(ctx context.Context, userId int64, RoleId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ? and `role_id` = ? limit 1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId, RoleId)
	return err
}

func (m *defaultUsersRoleRelationModel) FindOne(ctx context.Context, id int64) (*UsersRoleRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRoleRelationRows, m.table)
	var resp UsersRoleRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersRoleRelationModel) FindAllByUserId(ctx context.Context, userId int64) ([]int64, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", "role_id", m.table)
	var resp []int64
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersRoleRelationModel) UpdateUserRoles(ctx context.Context, userId int64, roles []int64) error {
	roleIds, err := m.FindAllByUserId(ctx, userId)
	switch err {
	case nil:
		for _, roleId := range roleIds{
			if !utils.InSlicesInt64(roleId, roles) {
				m.DeleteByUser(ctx, userId, roleId)
			}
		}
		for _, roleId := range roles{
			if !utils.InSlicesInt64(roleId, roleIds) {
				m.Insert(ctx, &UsersRoleRelation{
					RoleId: roleId,
					UserId: userId,
				})
			}
		}
		return nil
	case sqlc.ErrNotFound:
		for _, roleId := range roles{
			m.Insert(ctx, &UsersRoleRelation{
				RoleId: roleId,
				UserId: userId,
			})
		}
		return nil
	default:
		return err
	}
}

func (m *defaultUsersRoleRelationModel) Insert(ctx context.Context, data *UsersRoleRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, usersRoleRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.UserId)
	return ret, err
}

func (m *defaultUsersRoleRelationModel) Update(ctx context.Context, data *UsersRoleRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRoleRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.UserId, data.Id)
	return err
}

func (m *defaultUsersRoleRelationModel) tableName() string {
	return m.table
}
